<#@ template language="C#" debug="True" #>
<#@ output extension="cs" #>
<#@ include file="BaseClassTemplate.tt" #>

<#+


public class EntityTemplate : CSharpTemplate
{
	
	private EntityType _entitis;
	public EntityTemplate(EntityType Entitis)
	{
		_entitis = Entitis;
	}

	public override string TransformText()
	{
		base.TransformText();
#>
using System;
using System.Collections.Generic;
using Entities;
using DTO;
using Common;
namespace DataSeeds
{
	public class <#= _entitis.Name.Replace("T_","").Replace("C_","")+"Seed" #>
	{		
<#+
		
		var simpleProperties = GlobaltypeMapper.GetSimpleProperties(_entitis);
		//var propertiesWithDefaultValues = GlobaltypeMapper.GetPropertiesWithDefaultValues(_entitis);
		var navigationProperties = GlobaltypeMapper.GetNavigationProperties(_entitis);
		var complexProperties = GlobaltypeMapper.GetComplexProperties(_entitis);
		
#>  
        public <#= _entitis.Name #> GetEntitySeed()
        {
            return new <#= _entitis.Name #>
                        {
<#+foreach(var property in simpleProperties)
        {
#>
                            <#=codeStringGenerator.Property(property)#>
<#+
		}
		#>		
	                    };
        }
        public <#= _entitis.Name.Replace("T_","").Replace("C_","")+"DTO" #> GetDTOSeed()
        {
            return new <#= _entitis.Name.Replace("T_","").Replace("C_","")+"DTO" #>
                        {
<#+foreach(var property in simpleProperties)
        {
#>
                            <#=codeStringGenerator.Property(property)#>
<#+
		}
		#>		
	                    };
        }
    }
}
<#+
        return this.GenerationEnvironment.ToString();
	}
}
#>
