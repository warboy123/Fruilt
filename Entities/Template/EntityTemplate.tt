<#@ template language="C#" debug="True" #>
<#@ output extension="cs" #>
<#@ include file="BaseClassTemplate.tt" #>

<#+
// <copyright file="EntityTemplate.tt" company="">
//  Copyright © . All Rights Reserved.
// </copyright>

public class EntityTemplate : CSharpTemplate
{
	
	private EntityType _entitis;
	public EntityTemplate(EntityType Entitis)
	{
		_entitis = Entitis;
	}

	public override string TransformText()
	{
		base.TransformText();
        string summary="";
        if(_entitis.Documentation !=null && _entitis.Documentation.LongDescription!=null)
            summary=_entitis.Documentation.LongDescription;
                //entity.Documentation.Summary;
        else
            summary=_entitis.Name;
#>
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
namespace Entities
{
    /// <summary>
    /// <#=summary#>
    /// </summary>
	public class <#= _entitis.Name #>
	{
<#+
    var propertiesWithDefaultValues = GlobaltypeMapper.GetPropertiesWithDefaultValues(_entitis);
    var collectionNavigationProperties = GlobaltypeMapper.GetCollectionNavigationProperties(_entitis);
    var complexProperties = GlobaltypeMapper.GetComplexProperties(_entitis);

    if (propertiesWithDefaultValues.Any() || collectionNavigationProperties.Any() || complexProperties.Any())
    {
#>
		public <#=GlobalCode.Escape(_entitis)#>()
		{
<#+
        foreach (var edmProperty in propertiesWithDefaultValues)
        {
#>
			this.<#=GlobalCode.Escape(edmProperty)#> = <#=GlobaltypeMapper.CreateLiteral(edmProperty.DefaultValue)#>;
<#+
        }

        foreach (var navigationProperty in collectionNavigationProperties)
        {
#>
			this.<#=GlobalCode.Escape(navigationProperty)#> = new HashSet<<#=GlobaltypeMapper.GetTypeName(navigationProperty.ToEndMember.GetEntityType())#>>();
<#+
        }

        foreach (var complexProperty in complexProperties)
        {
#>
			this.<#=GlobalCode.Escape(complexProperty)#> = new <#=GlobaltypeMapper.GetTypeName(complexProperty.TypeUsage)#>();
<#+
        }
#>
		}		
<#+
    }
		var simpleProperties = GlobaltypeMapper.GetSimpleProperties(_entitis);
		//var propertiesWithDefaultValues = GlobaltypeMapper.GetPropertiesWithDefaultValues(_entitis);
		var navigationProperties = GlobaltypeMapper.GetNavigationProperties(_entitis);
		
		foreach(var property in simpleProperties)
        {
            string Propertysummary="";
            string KEY="[Key]";
            if(property.Documentation !=null && property.Documentation.LongDescription!=null)
                Propertysummary=property.Documentation.LongDescription;
                //property.Documentation.Summary;
                //sp.TypeUsage.Facets.Contains("MaxLength") ? sp.TypeUsage.Facets["MaxLength"].Value : string.Empty

#>
        /// <summary>
        /// <#=Propertysummary#>
        /// </summary>
<#+                if(property.MetadataProperties
                    .Any(m =>    m.PropertyKind == PropertyKind.Extended 
                && Convert.ToString(m.Value) == "Identity")){
#>
        <#=KEY#>               
<#+  }           
        foreach(var mp in   property.TypeUsage.Facets)
            {
                    if(mp.Name.Contains("MaxLength")){
  #>    
        [MaxLength(<#=Convert.ToString(mp.Value)#>)]
<#+                    }
            }
         if(!property.Nullable)
            {   #>
        [Required(ErrorMessage="值不能为空")]
<#+
            }#>
		<#=codeStringGenerator.Property(property)#>
<#+
		}
		
    if (navigationProperties.Any())
    {
#>

<#+
        foreach (var navigationProperty in navigationProperties)
        { 
            string navigationPropertysummary="";
            if(navigationProperty.Documentation !=null && navigationProperty.Documentation.LongDescription!=null)
                navigationPropertysummary=navigationProperty.Documentation.LongDescription;
                //navigationProperty.Documentation.Summary;
            
#>
        /// <summary>
        /// <#=navigationPropertysummary#>
        /// </summary>

		<#=codeStringGenerator.NavigationProperty(navigationProperty)#>
<#+
        }
    }
		
		#>		
	}
}
<#+
        return this.GenerationEnvironment.ToString();
	}
}
#>
